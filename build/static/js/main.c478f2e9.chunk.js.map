{"version":3,"sources":["www/logos.svg","index.js","www/App.js","www/serviceWorker.js","www/index.js"],"names":["module","exports","__webpack_require__","p","require","App","state","count","componentDidMount","_callee","_yield$window$fetch$t","regenerator_default","a","wrap","_context","prev","next","window","fetch","then","res","json","sent","_this","setState","stop","increment","_callee2","_yield$window$fetch$t2","_context2","method","react_default","createElement","className","src","logos","alt","href","target","rel","this","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_www_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sFCKxCH,EAAOC,QAAUG,EAAQ,iMCuDVC,qNAvDbC,MAAQ,CACNC,MAAO,gBAGTC,uCAAoB,SAAAC,IAAA,IAAAC,EAAAH,EAAA,OAAAI,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMC,OAAOC,MAAP,cAA2BC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SADjD,OAAAX,EAAAI,EAAAQ,KACVf,EADUG,EACVH,MACRgB,EAAKC,SAAS,CAAEjB,UAFE,wBAAAO,EAAAW,SAAAhB,QAKpBiB,+BAAY,SAAAC,IAAA,IAAAC,EAAArB,EAAA,OAAAI,EAAAC,EAAAC,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cAAAa,EAAAb,KAAA,EACcC,OACrBC,MADqB,uBACS,CAAEY,OAAQ,SACxCX,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAHT,OAAAO,EAAAC,EAAAP,KACFf,EADEqB,EACFrB,MAGRgB,EAAKC,SAAS,CAAEjB,UAJN,wBAAAsB,EAAAJ,SAAAE,kDAOZ,WACE,OACEI,EAAAnB,EAAAoB,cAAA,OAAKC,UAAU,OACbF,EAAAnB,EAAAoB,cAAA,UAAQC,UAAU,cAChBF,EAAAnB,EAAAoB,cAAA,OAAKE,IAAKC,IAAOF,UAAU,WAAWG,IAAI,SAC1CL,EAAAnB,EAAAoB,cAAA,SACG,SACDD,EAAAnB,EAAAoB,cAAA,KAAGK,KAAK,sBAAsBC,OAAO,SAASC,IAAI,uBAAlD,SAGC,KACDR,EAAAnB,EAAAoB,cAAA,KAAGK,KAAK,wBAAwBC,OAAO,SAASC,IAAI,uBAApD,WAGC,SACDR,EAAAnB,EAAAoB,cAAA,KAAGK,KAAK,wBAAwBC,OAAO,SAASC,IAAI,uBAApD,eAIFR,EAAAnB,EAAAoB,cAAA,mBACSD,EAAAnB,EAAAoB,cAAA,8BADT,OACwCD,EAAAnB,EAAAoB,cAAA,gCADxC,yBAGAD,EAAAnB,EAAAoB,cAAA,SACED,EAAAnB,EAAAoB,cAAA,2BADF,sDAGAD,EAAAnB,EAAAoB,cAAA,WACAD,EAAAnB,EAAAoB,cAAA,oBAAYQ,KAAKlC,MAAMC,OACvBwB,EAAAnB,EAAAoB,cAAA,iBACOD,EAAAnB,EAAAoB,cAAA,oCACLD,EAAAnB,EAAAoB,cAAA,UAAQS,QAASD,KAAKd,UAAWO,UAAU,cAA3C,gBA9CMS,cCQEC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAOjB,EAAAnB,EAAAoB,cAACiB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.c478f2e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logos.a9b0546c.svg\";","// \"Create React App\" tooling expects to find the WWW root here,\n// so we simply use this file to import the ./www directory.\n//\n// For the backend, we set the container's entrypoint to src/api/index.js\n\nmodule.exports = require('./www')\n","import React, { Component } from 'react'\nimport logos from './logos.svg'\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    count: 'loading...'\n  }\n\n  componentDidMount = async () => {\n    const { count } = await window.fetch(`/api/count`).then(res => res.json())\n    this.setState({ count })\n  }\n\n  increment = async () => {\n    const { count } = await window\n      .fetch(`/api/count/increment`, { method: 'POST' })\n      .then(res => res.json())\n    this.setState({ count })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logos} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            {'Learn '}\n            <a href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n              React\n            </a>\n            {', '}\n            <a href=\"https://expressjs.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n              Express\n            </a>\n            {', and '}\n            <a href=\"https://kubernetes.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n              Kubernetes\n            </a>\n          </p>\n          <p>\n            Modify <code>src/www/App.js</code> or <code>src/api/index.js</code> to reload UI or API.\n          </p>\n          <p>\n            <code>yarn deploy</code> to build containers and deploy them to production\n          </p>\n          <hr />\n          <h2>Count: {this.state.count}</h2>\n          <p>\n            Call <code>/api/count/increment</code>\n            <button onClick={this.increment} className=\"App-button\">\n              Go\n            </button>\n          </p>\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}